#include<bits/stdc++.h>
#define MAX 1000
using namespace std;
 
char grid[MAX][MAX];
bool visited[MAX][MAX];
int steps[MAX][MAX];
int N,M;
typedef pair<int, int> Pair;
 
bool isSafe(int si, int sj){
    if(si>=N || sj>=M || si<0 || sj<0 || grid[si][sj]=='*')
    return false;
    return true;
}
 
void bfs(int si, int sj){
    int dx[]={0,-1, 0, 1};
    int dy[]={1, 0,-1, 0};
    steps[si][sj]=0;
    
    queue<Pair> q;
    q.push({si, sj});
    
    while(!q.empty()){
    Pair p=q.front();
    q.pop();
    si=p.first;
    sj=p.second;
    
    if(visited[si][sj])
    continue;
    
    visited[si][sj]=true;
    
    for(int i=0;i<4;i++){
        int u=si+dx[i];
        int v=sj+dy[i];
        if(isSafe(u,v)){
            if(!visited[u][v]){
                steps[u][v]=steps[si][sj]+1;
                q.push({u, v});
                }
            }
        }
    }
}
 
int main(){
    int Q;
    cin >> N >> M >> Q;
    
    for(int i=0;i<N;i++)
    for(int j=0;j<M;j++)
    cin >> grid[i][j];
    
    int si,sj;
    cin >> si >> sj;
    memset(visited, false, sizeof(visited));
    memset(steps, INT_MAX, sizeof(steps));
    
    bfs(si-1, sj-1);
    /*
    for(int i=0;i<N;i++){
        for(int j=0;j<M;j++)
        cout << steps[i][j] << " ";
        cout << endl;
    }*/
    for(int i=0;i<Q;i++){
        int di, dj;
        cin >> di >> dj;
        cout << steps[di-1][dj-1] << endl;
    }
    
    
}
