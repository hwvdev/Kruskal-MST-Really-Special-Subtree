#include<bits/stdc++.h>
using namespace std;
#define MAX 100000
typedef long long ll;
vector<ll> graph[MAX];
ll dist[MAX+1], dist1[MAX+1];
ll ans=0, ans1=0;
ll id=0;
 
void dfs(ll src){
    vector<ll>::iterator i;
    
    for(i=graph[src].begin();i!=graph[src].end();i++){
        if(dist[*i]==-1){
            dist[*i]=dist[src]+1;
            if(ans<dist[*i]){
                ans=dist[*i];
                id=*i;
            }
            dfs(*i);
        }
    }
}
 
void dfs1(ll src){
    vector<ll>::iterator i;
    
    for(i=graph[src].begin();i!=graph[src].end();i++){
        if(dist1[*i]==-1){
            dist1[*i]=dist1[src]+1;
            ans1=max(dist1[*i], ans1);
            dfs1(*i);
        }
    }
}
 
int main(){
    ll n,k;
    cin >> n >> k ;
    ll A[n+1];
    for(ll i=0;i<n;i++)
    cin >> A[i+1];
    
    for(ll i=0;i<n-1;i++){
        ll u,v;
        cin >> u >> v;
        if(A[u]%k!=0 || A[v]%k!=0)
        continue;
        else{
            graph[u].push_back(v);
            graph[v].push_back(u);
        }
    }
    memset(dist1, -1, sizeof(dist1));
    memset(dist, -1, sizeof(dist));
//    memset(visited, false, sizeof(visited));
    
    for(ll i=1;i<=n;i++){
        if(dist[i]==-1){
            dist[i]=0;
            dfs(i);
        //    cout << ans <<endl;
            ans=0;
            dist1[id]=0;
            dfs1(id);
        }
    }
    cout << ans1 << endl;
}
